" Vim configurations
" -----------------------------------------------------------------------------
    set autochdir
    set number               " show current line number
    set relativenumber
    set laststatus=2
    " set statusline+=%F
" -----------------------------------------------------------------------------

" Auto closing brackets
" -----------------------------------------------------------------------------
    :so ~/.vim/autopair.vim
" -----------------------------------------------------------------------------

" Auto install plug
" -----------------------------------------------------------------------------
    let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
    if empty(glob(data_dir . '/autoload/plug.vim'))
      silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
" -----------------------------------------------------------------------------

" Plugins
" -----------------------------------------------------------------------------
    call plug#begin('~/.vim/plugged')

    " Color Theme and Fonts 
    " -----------------------------------------------------------------------------
        " Plug 'tomasr/molokai'
        Plug 'NLKNguyen/papercolor-theme'

	" If fonts are not working:
	" https://github.com/powerline/fonts/issues/208
	" Preferences > Text > Non-ASCII Font = '12pt Meslo LG S Regular for
	" Powerline'
        Plug 'vim-airline/vim-airline'
        Plug 'vim-airline/vim-airline-themes'
    " -----------------------------------------------------------------------------

    " Completion Support
    " -----------------------------------------------------------------------------
        Plug 'neoclide/coc.nvim', {'branch': 'release'}
        " https://github.com/neoclide/coc.nvim
        set encoding=utf-8
        set nobackup
        set nowritebackup
        set updatetime=300
        set signcolumn=yes

        " autocmd User CocStatusChange redrawstatus

        "Use tab for trigger completion with characters ahead and navigate.
        " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
        " other plugin before putting this into your config.
        inoremap <silent><expr> <TAB>
              \ pumvisible() ? "\<C-n>" :
              \ <SID>check_back_space() ? "\<TAB>" :
              \ coc#refresh()
        inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
        
        " use <tab> to trigger completion and navigate to the next complete item
        function! CheckBackspace() abort
          let col = col('.') - 1
          return !col || getline('.')[col - 1]  =~# '\s'
        endfunction
        
        inoremap <silent><expr> <Tab>
              \ coc#pum#visible() ? coc#pum#next(1) :
              \ CheckBackspace() ? "\<Tab>" :
              \ coc#refresh()
        
        function! s:check_back_space() abort
          let col = col('.') - 1
          return !col || getline('.')[col - 1]  =~# '\s'
        endfunction
        
        " Use K to show documentation in preview window
        nnoremap <silent> K :call ShowDocumentation()<CR>
        
        function! ShowDocumentation()
          if CocAction('hasProvider', 'hover')
            call CocActionAsync('doHover')
          else
            call feedkeys('K', 'in')
          endif
        endfunction
    " -----------------------------------------------------------------------------
    
    " Fzf
    " -----------------------------------------------------------------------------
        Plug 'junegunn/fzf', {'do': { -> fzf#install()}}
        Plug 'junegunn/fzf.vim'
    " -----------------------------------------------------------------------------
    
    " Golang Support
    " -----------------------------------------------------------------------------
        " Plug 'fatih/vim-go', {'do': ':GoInstallBinaries'}
        " " Disable vim-go mapping for :gd
        " let g:go_def_mapping_enabled = 0
        " let g:go_metalinter_autosave = 1
        " let g:go_list_type = 'locationlist'
        " let g:go_doc_popup_window = 1
        " " allows doHover to display instead of GoDoc since they're both mapped to K
        " let g:go_doc_keywordprg_enabled = 0
        " 
        " " turn to next or previous errors, after open location list
        " nmap <leader>j :lnext<CR>
        " nmap <leader>k :lprevious<CR>
    " -----------------------------------------------------------------------------

    " NerdTree
    " -----------------------------------------------------------------------------
        Plug 'preservim/nerdtree'
        nnoremap <C-n> :NERDTree<CR>
        nnoremap <C-t> :NERDTreeToggle<CR>
        
        " Exit Vim if NERDTree is the only window remaining in the only tab.
        autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
    " -----------------------------------------------------------------------------
    
    " Other
    " -----------------------------------------------------------------------------
        Plug 'APZelos/blamer.nvim'
        Plug 'tpope/vim-fugitive'
    " -----------------------------------------------------------------------------

call plug#end()
" -----------------------------------------------------------------------------

" Themes and Fonts
" -----------------------------------------------------------------------------
    if has('termguicolors')
        set termguicolors
    endif
    set t_Co=256
    set background=dark
            
    let g:airline_powerline_fonts = 1
    let g:airline_theme='papercolor'

    colorscheme papercolor 
" -----------------------------------------------------------------------------
